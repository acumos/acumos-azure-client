{
  "name": "name of the composite solution",
  "version": "version of the composite solution",
  "input_ports": [
    {
      "container_name": "Aggregator - 1",
      "operation_signature": {
        "operation_name": "aggregate"
      }
    },
    {
      "container_name": "Aggregator - 2",
      "operation_signature": {
        "operation_name": "aggregate - operation names can be identical but IP and Port of containers will differ"
      }
    }
  ],
  "nodes": [
    {
      "container_name": "Aggregator-1",
      "node_type": "DataMapper or MLModel or DataBroker or TrainingClient",
      "image": "url of the docker image of the named node in Nexus. Information consumed by deployer Aggregator-1",
      "proto_uri": "url of the proto file of the ML Model, otherwise empty",
      "operation_signature_list": [
        {
          "operation_signature": {
            "operation_name": "aggregate",
            "input_message_name": "DataFrame - MC should send this message name to Probe along with proto_uri",
            "output_message_name": "DataFrames"
          },
          "connected_to": [
            {
              "container_name": "Predictor-1",
              "operation_signature": {
                "operation_name": "predict"
              }
            },
            {
              "container_name": "Predictor-2",
              "operation_signature": {
                "operation_name": "predict"
              }
            }
          ]
        }
      ]
    },
    {
      "container_name": "Predictor-1",
      "node_type": "DataMapper or MLModel or DataBroker or TrainingClient",
      "image": "url of the docker image of the named node Predictor-1",
      "proto_uri": "url of the proto file of the ML Model, otherwise empty",
      "operation_signature_list": [
        {
          "operation_signature": {
            "operation_name": "predict",
            "input_message_name": "DataFrames  - MC should send this message name to Probe along with proto_uri",
            "output_message_name": "Prediction"
          },
          "connected_to": [
            {
              "container_name": "Classifier-1",
              "operation_signature": {
                "operation_name": "classify"
              }
            },
            {
              "container_name": "Classifier-2",
              "operation_signature": {
                "operation_name": "classify"
              }
            }
          ]
        }
      ]
    },
    {
      "container_name": "Classifier-1",
      "node_type": "DataMapper or MLModel or DataBroker or TrainingClient",
      "image": "url of the docker image of the named node Classifier-1",
      "proto_uri": "url of the proto file of the ML Model, otherwise empty",
      "operation_signature_list": [
        {
          "operation_signature": {
            "operation_name": "classify",
            "input_message_name": "Prediction  - MC should send this message name to Probe along with proto_uri",
            "output_message_name": "Classification"
          },
          "connected_to": [
            {
              "container_name": "Alarm Generator-1",
              "operation_signature": {
                "operation_name": "generate_alarms"
              }
            },
            {
              "container_name": "Alarm Generator-2",
              "operation_signature": {
                "operation_name": "generate_alarms"
              }
            }
          ]
        }
      ]
    },
    {
      "container_name": "Alarm Generator-1",
      "node_type": "MLModel",
      "image": "url of the docker image of the named node Alarm Generator-1",
      "proto_uri": "url of the proto file of the ML Model, otherwise empty",
      "operation_signature_list": [
        {
          "operation_signature": {
            "operation_name": "generate_alarms",
            "input_message_name": "Classification  - This is last model. MC should send both input and output message name to Probe along with proto_uri",
            "output_message_name": "Alarm -  - This is last model. MC should send both input and output message name to Probe along with proto_uri"
          },
          "connected_to": []
        }
      ]
    },
    {
      "container_name": "My_CSV_File_Data_Broker",
      "node_type": "DataBroker",
      "image": "empty - there is a well know url for each Data Broker type that is known to the Deployer My_CSV_File_Data_Broker",
      "proto_uri": "com/artifact/cpm2/1/cpm2-1.proto",
      "data_broker_map": {
        "data_broker_type": "CSV_File",
        "map_inputs": [
          {
            "input_field": {
              "name": "name of source field",
              "type": "string or int or float or boolean or Long or Double, Byte",
              "checked": "YES or empty means NO",
              "mapped_to_field": "tag number of the field in the target table, such as 1.2 or 2.3.4 or empty if it is not yet mapped"
            }
          },
          {
            "input_field": {
              "name": "name of source field",
              "type": "int or string or float",
              "checked": "YES or empty means NO",
              "mapped_to_field": "tag number of the field in the target table, such as 1.2 or 2.3.4 or empty if it is not yet mapped"
            }
          }
        ],
        "map_outputs": [
          {
            "output_field": {
              "tag": "1.1 or 1.2 or 4.3.2  etc.",
              "name": "name of target field sepal_len",
              "type_and_role_hierarchy_list": [
                {
                  "name": "string",
                  "role": "null"
                },
                {
                  "name": "DataFrameRow",
                  "role": "repeated"
                },
                {
                  "name": "DataFrame",
                  "role": "null"
                }
              ]
            }
          }
        ],
        "script": "user provided multi line SQL or File system commands to read, parse and retrieve data from file or directory",
        "target_system_url": "File or JDBC url in the target system",
        "local_system_data_file_path": "CSV or JSON Sample Data File path on users local machine",
        "first_row": "contains_data or contains_field_names. this field is only populated for CSV file Data Broker",
        "csv_file_field_separator": ", or ; or | , etc. characters"
      },
      "data_sources": [
        {
          "name": "Image-Data-Base",
          "operation_signature": {
            "operation_name": "getData"
          }
        }
      ],
      "operation_signature_list": [
        {
          "operation_signature": {
            "operation_name": "pullData - the DB exposes this operation which is called by Model Connector",
            "input_message_name": "ANY  - MC should NOT send any input or output of DataBroker or Data Mapper to Probe",
            "output_message_name": "DataFrame - MC should NOT send any input or output of DataBroker or Data Mapper to Probe"
          },
          "connected_to": [
            {
              "container_name": "Aggregator - 1",
              "operation_signature": {
                "operation_name": "aggregate"
              }
            },
            {
              "container_name": "Aggregator -2",
              "operation_signature": {
                "operation_name": "aggregate"
              }
            }
          ]
        }
      ]
    }
  ],
  "probeIndicator": [
    {
      "value": "True or False"
    }
  ],
  "training_clients": [
    {
      "container_name": "Image-Classifier-Trainer",
      "image": "url of the training client image in Nexus",
      "data_brokers": [
        {
          "name": "Image-Data-Broker",
          "operation_signature": {
            "operation_name": "get_image"
          }
        }
      ],
      "ml_models": [
        {
          "name": "Image-Predictor",
          "operation_signature": {
            "operation_name": "predict_image"
          }
        }
      ]
    }
  ]
}